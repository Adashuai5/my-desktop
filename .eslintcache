[{"D:\\ada\\code\\my-desktop\\src\\index.tsx":"1","D:\\ada\\code\\my-desktop\\src\\reportWebVitals.ts":"2","D:\\ada\\code\\my-desktop\\src\\App.tsx":"3","D:\\ada\\code\\my-desktop\\src\\components\\main\\Main.tsx":"4","D:\\ada\\code\\my-desktop\\src\\components\\header\\Header.tsx":"5","D:\\ada\\code\\my-desktop\\src\\components\\footer\\Footer.tsx":"6","D:\\ada\\code\\my-desktop\\src\\components\\footer\\reducer.ts":"7","D:\\ada\\code\\my-desktop\\src\\components\\setting\\Setting.tsx":"8","D:\\ada\\code\\my-desktop\\src\\components\\iconfont\\index.tsx":"9","D:\\ada\\code\\my-desktop\\src\\components\\launchpad\\index.tsx":"10","D:\\ada\\code\\my-desktop\\src\\components\\calculator\\index.tsx":"11","D:\\ada\\code\\my-desktop\\src\\components\\drawing\\index.tsx":"12","D:\\ada\\code\\my-desktop\\src\\components\\modal\\UseModal.tsx":"13","D:\\ada\\code\\my-desktop\\src\\components\\modal\\store.ts":"14","D:\\ada\\code\\my-desktop\\src\\components\\calculator\\Calculator.tsx":"15","D:\\ada\\code\\my-desktop\\src\\components\\drawing\\Canvas.tsx":"16","D:\\ada\\code\\my-desktop\\src\\components\\draggable\\index.tsx":"17","D:\\ada\\code\\my-desktop\\src\\components\\modal\\Modal.tsx":"18","D:\\ada\\code\\my-desktop\\src\\components\\modal\\draggable\\index.tsx":"19","D:\\ada\\code\\my-desktop\\src\\components\\dialog\\index.tsx":"20"},{"size":525,"mtime":1612276542600,"results":"21","hashOfConfig":"22"},{"size":440,"mtime":1612276542601,"results":"23","hashOfConfig":"22"},{"size":360,"mtime":1593965541969,"results":"24","hashOfConfig":"22"},{"size":191,"mtime":1593965541972,"results":"25","hashOfConfig":"22"},{"size":3252,"mtime":1600248502405,"results":"26","hashOfConfig":"22"},{"size":12179,"mtime":1612277857740,"results":"27","hashOfConfig":"22"},{"size":702,"mtime":1593444804424,"results":"28","hashOfConfig":"22"},{"size":6920,"mtime":1612192235235,"results":"29","hashOfConfig":"22"},{"size":933,"mtime":1593444804407,"results":"30","hashOfConfig":"22"},{"size":5025,"mtime":1612278912198,"results":"31","hashOfConfig":"22"},{"size":1363,"mtime":1612192214839,"results":"32","hashOfConfig":"22"},{"size":2009,"mtime":1612192228942,"results":"33","hashOfConfig":"22"},{"size":959,"mtime":1605004345208,"results":"34","hashOfConfig":"22"},{"size":531,"mtime":1605004345210,"results":"35","hashOfConfig":"22"},{"size":4098,"mtime":1605004345200,"results":"36","hashOfConfig":"22"},{"size":14802,"mtime":1612192223273,"results":"37","hashOfConfig":"22"},{"size":2158,"mtime":1605004345203,"results":"38","hashOfConfig":"22"},{"size":628,"mtime":1604852009639,"results":"39","hashOfConfig":"22"},{"size":3626,"mtime":1605004345209,"results":"40","hashOfConfig":"22"},{"size":1789,"mtime":1605004345202,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"z7pf9g",{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"48"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"48"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"48"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"D:\\ada\\code\\my-desktop\\src\\index.tsx",[],"D:\\ada\\code\\my-desktop\\src\\reportWebVitals.ts",[],"D:\\ada\\code\\my-desktop\\src\\App.tsx",[],["87","88"],"D:\\ada\\code\\my-desktop\\src\\components\\main\\Main.tsx",[],"D:\\ada\\code\\my-desktop\\src\\components\\header\\Header.tsx",[],"D:\\ada\\code\\my-desktop\\src\\components\\footer\\Footer.tsx",[],"D:\\ada\\code\\my-desktop\\src\\components\\footer\\reducer.ts",[],"D:\\ada\\code\\my-desktop\\src\\components\\setting\\Setting.tsx",["89"],"import React, {\r\n  useContext,\r\n  useState,\r\n  useEffect,\r\n  CSSProperties,\r\n  useCallback,\r\n} from \"react\";\r\nimport {useModal} from \"../modal/UseModal\";\r\nimport {FooterContext} from \"../footer/Footer\";\r\nimport {\r\n  View,\r\n  Radio,\r\n  TitleBar,\r\n  Text,\r\n  ListView,\r\n  ListViewRow,\r\n  Checkbox,\r\n} from \"react-desktop/macOs\";\r\nimport \"./index.scss\";\r\nimport {Iconfont} from \"../iconfont\";\r\n\r\n/// <reference path=\"react-desktop.d.ts\" />\r\n\r\ninterface OptionsProps {\r\n  title: string;\r\n  value: number;\r\n  max: string;\r\n  min: string;\r\n}\r\n\r\nexport const Setting = React.memo(() => {\r\n  const {open, close, RenderModal} = useModal(\"SettingView\");\r\n  const positionMap = [\"left\", \"bottom\", \"right\", \"top\"];\r\n  const setListMap = [{title: \"通用\"}];\r\n  const [\r\n    isSettingOpen,\r\n    setSettingOpen,\r\n    isSettingShow,\r\n    setSettingShow,\r\n    position,\r\n    setPosition,\r\n    dockData,\r\n    setDockData,\r\n  ] = useContext(FooterContext);\r\n  const optionsMap: Array<OptionsProps> = [\r\n    {\r\n      title: \"图标默认大小\",\r\n      value: dockData.length * 1,\r\n      max: \"128\",\r\n      min: \"25\",\r\n    },\r\n    {\r\n      title: \"图标缩放后大小\",\r\n      value: dockData.bigLength * 1,\r\n      max: \"256\",\r\n      min: \"25\",\r\n    },\r\n    {\r\n      title: \"图标之间距离大小\",\r\n      value: dockData.itemMargin * 1,\r\n      max: \"10\",\r\n      min: \"0\",\r\n    },\r\n    {\r\n      title: \"Dock 距离屏幕边缘大小\",\r\n      value: dockData.distance * 1,\r\n      max: \"100\",\r\n      min: \"0\",\r\n    },\r\n  ];\r\n  const [selected, setTitle] = useState(\"通用\");\r\n  useEffect(isSettingOpen.type ? open : close, [isSettingOpen]);\r\n\r\n  const onInputChange = useCallback(\r\n    (value: string, item: OptionsProps) => {\r\n      switch (item.title) {\r\n        case \"图标默认大小\":\r\n          setDockData({\r\n            name: \"change\",\r\n            dockData: {...dockData, length: value},\r\n          });\r\n          return;\r\n        case \"图标缩放后大小\":\r\n          setDockData({\r\n            name: \"change\",\r\n            dockData: {...dockData, bigLength: value},\r\n          });\r\n          return;\r\n        case \"图标之间距离大小\":\r\n          setDockData({\r\n            name: \"change\",\r\n            dockData: {...dockData, itemMargin: value},\r\n          });\r\n          return;\r\n        case \"Dock 距离屏幕边缘大小\":\r\n          setDockData({\r\n            name: \"change\",\r\n            dockData: {...dockData, distance: value},\r\n          });\r\n          return;\r\n      }\r\n    },\r\n    [dockData, setDockData]\r\n  );\r\n\r\n  return (\r\n    <RenderModal\r\n      data={{\r\n        width: 684,\r\n        height: 466,\r\n        id: \"SettingView\",\r\n        moveId: \"SettingMove\",\r\n        isShow: isSettingShow,\r\n      }}\r\n    >\r\n      <>\r\n        <TitleBar\r\n          id=\"SettingMove\"\r\n          controls\r\n          inset\r\n          isFullscreen={false}\r\n          onCloseClick={() => {\r\n            close();\r\n            setSettingOpen({...isSettingOpen, type: false});\r\n            localStorage.setItem(\"dockData\", JSON.stringify(dockData));\r\n            localStorage.setItem(\"position\", JSON.stringify(position));\r\n          }}\r\n          onMinimizeClick={() => {\r\n            setSettingShow(false);\r\n          }}\r\n          onMaximizeClick={open}\r\n        />\r\n        <div className=\"mainSet\">\r\n          <View className=\"leftSet\">\r\n            <ListView>\r\n              {setListMap.map((item, index) => {\r\n                return (\r\n                  <ListViewRow\r\n                    key={item.title + index}\r\n                    onClick={() => setTitle(item.title)}\r\n                    background={selected === item.title ? \"#bfbfbf\" : null}\r\n                    padding=\"11px 20px\"\r\n                  >\r\n                    <Iconfont\r\n                      type=\"icon-ios-home\"\r\n                      style={{\r\n                        marginRight: \"6px\",\r\n                      }}\r\n                    />\r\n                    <Text color=\"#414141\" size=\"14\" bold>\r\n                      {item.title}\r\n                    </Text>\r\n                  </ListViewRow>\r\n                );\r\n              })}\r\n            </ListView>\r\n          </View>\r\n          <View className=\"rightSet\">\r\n            <Text bold marginBottom=\"10px\" size=\"20\">\r\n              {selected}\r\n            </Text>\r\n            <div className=\"divide\"/>\r\n            {optionsMap.map((item, index) => {\r\n              return (\r\n                <div className=\"options\" key={index + item.value}>\r\n                  {item.title === \"图标缩放后大小\" ? (\r\n                    <Checkbox\r\n                      label={item.title}\r\n                      onChange={() =>\r\n                        setDockData({\r\n                          name: \"change\",\r\n                          dockData: {\r\n                            ...dockData,\r\n                            isDockBig: !dockData.isDockBig,\r\n                          },\r\n                        })\r\n                      }\r\n                      defaultChecked={dockData.isDockBig}\r\n                    />\r\n                  ) : (\r\n                    <Text bold marginBottom=\"10px\">\r\n                      {item.title}\r\n                    </Text>\r\n                  )}\r\n                  <input\r\n                    min={item.min}\r\n                    max={item.max}\r\n                    type=\"range\"\r\n                    value={item.value}\r\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                      onInputChange(e.target.value, item);\r\n                    }}\r\n                  />\r\n                  <span>{item.value}</span>\r\n                </div>\r\n              );\r\n            })}\r\n\r\n            <Text bold marginBottom=\"10px\">\r\n              Dock 所在屏幕位置\r\n            </Text>\r\n            <View\r\n              style={\r\n                {\r\n                  lineHeight: \"22px\",\r\n                } as CSSProperties\r\n              }\r\n            >\r\n              {positionMap.map((item, index) => {\r\n                return (\r\n                  <div\r\n                    style={\r\n                      {\r\n                        paddingRight: 28,\r\n                      } as CSSProperties\r\n                    }\r\n                    key={index + item}\r\n                  >\r\n                    <Radio\r\n                      label={item}\r\n                      name={item}\r\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                        setPosition({\r\n                          name: \"change\",\r\n                          position: e.target.value,\r\n                        });\r\n                      }}\r\n                      defaultValue={item}\r\n                      defaultChecked={item === position}\r\n                    />\r\n                  </div>\r\n                );\r\n              })}\r\n            </View>\r\n          </View>\r\n        </div>\r\n      </>\r\n    </RenderModal>\r\n  );\r\n});\r\n","D:\\ada\\code\\my-desktop\\src\\components\\iconfont\\index.tsx",[],"D:\\ada\\code\\my-desktop\\src\\components\\launchpad\\index.tsx",[],"D:\\ada\\code\\my-desktop\\src\\components\\calculator\\index.tsx",["90"],"import React, { useContext, useEffect } from \"react\";\r\nimport { useModal } from \"../modal/UseModal\";\r\nimport { FooterContext } from \"../footer/Footer\";\r\nimport { TitleBar } from \"react-desktop/macOs\";\r\nimport Calculate from \"./Calculator\";\r\nimport \"./index.scss\";\r\n/// <reference path=\"react-desktop.d.ts\" />\r\n\r\nexport const Calculator = React.memo(() => {\r\n  const { open, close, RenderModal } = useModal(\"CalculatorView\");\r\n  const [\r\n    isCalculatorOpen,\r\n    setCalculatorOpen,\r\n    isCalculatorShow,\r\n    setCalculatorShow,\r\n  ] = useContext(FooterContext);\r\n\r\n  useEffect(isCalculatorOpen.type ? open : close, [isCalculatorOpen]);\r\n  return (\r\n    <RenderModal\r\n      data={{\r\n        width: 410,\r\n        height: 560,\r\n        id: \"CalculatorView\",\r\n        moveId: \"calculatorMove\",\r\n        isShow: isCalculatorShow,\r\n      }}\r\n    >\r\n      <>\r\n        <TitleBar\r\n          id=\"calculatorMove\"\r\n          transparent\r\n          controls\r\n          isFullscreen={false}\r\n          onCloseClick={() => {\r\n            close();\r\n            setCalculatorOpen({\r\n              ...isCalculatorOpen,\r\n              type: false,\r\n            });\r\n          }}\r\n          onMinimizeClick={() => {\r\n            setCalculatorShow(false);\r\n          }}\r\n          onMaximizeClick={open}\r\n        />\r\n        <Calculate />\r\n      </>\r\n    </RenderModal>\r\n  );\r\n});\r\n","D:\\ada\\code\\my-desktop\\src\\components\\drawing\\index.tsx",["91"],"import React, {\r\n  useContext,\r\n  useEffect,\r\n  useState,\r\n  useCallback,\r\n  useRef,\r\n} from \"react\";\r\nimport { useModal } from \"../modal/UseModal\";\r\nimport { FooterContext } from \"../footer/Footer\";\r\nimport { TitleBar } from \"react-desktop/macOs\";\r\nimport Canvas from \"./Canvas\";\r\nimport \"./index.scss\";\r\n/// <reference path=\"react-desktop.d.ts\" />\r\n\r\nexport const Drawing = React.memo(() => {\r\n  const { open, close, RenderModal } = useModal(\"DrawingView\");\r\n  const [isDrawingOpen, , isDrawingShow, setDrawingShow] = useContext(\r\n    FooterContext\r\n  );\r\n  const [style, setStyle] = useState({ width: 1200, height: 800 });\r\n  const [isFullscreen, setFullscreen] = useState(false);\r\n\r\n  useEffect(isDrawingOpen.type ? open : close, [isDrawingOpen]);\r\n  const maximizeClick = useCallback(() => {\r\n    if (isFullscreen) {\r\n      setStyle({ width: 1200, height: 800 });\r\n    } else {\r\n      setStyle({ width: -1, height: -1 });\r\n    }\r\n    setFullscreen(!isFullscreen);\r\n  }, [isFullscreen]);\r\n\r\n  const drawingRef = useRef<any>();\r\n\r\n  const drawingCloseClick = () => {\r\n    if (drawingRef.current) {\r\n      drawingRef.current.drawingCloseClick();\r\n    }\r\n  };\r\n  return (\r\n    <RenderModal\r\n      data={{\r\n        width: style.width,\r\n        height: style.height,\r\n        id: \"DrawingView\",\r\n        moveId: \"DrawingMove\",\r\n        isShow: isDrawingShow,\r\n      }}\r\n    >\r\n      <div className=\"drawing-wrapper\">\r\n        <TitleBar\r\n          controls\r\n          id=\"DrawingMove\"\r\n          isFullscreen={isFullscreen}\r\n          onCloseClick={drawingCloseClick}\r\n          onMinimizeClick={() => {\r\n            setDrawingShow(false);\r\n          }}\r\n          onMaximizeClick={maximizeClick}\r\n          onResizeClick={maximizeClick}\r\n        />\r\n        <Canvas\r\n          onRef={drawingRef}\r\n          height={isFullscreen ? document.body.clientHeight - 32 : style.height}\r\n          width={isFullscreen ? document.body.clientWidth : style.width}\r\n        />\r\n      </div>\r\n    </RenderModal>\r\n  );\r\n});\r\n","D:\\ada\\code\\my-desktop\\src\\components\\modal\\UseModal.tsx",[],"D:\\ada\\code\\my-desktop\\src\\components\\modal\\store.ts",[],"D:\\ada\\code\\my-desktop\\src\\components\\calculator\\Calculator.tsx",[],"D:\\ada\\code\\my-desktop\\src\\components\\drawing\\Canvas.tsx",["92"],"import React, {\r\n  useCallback,\r\n  useEffect,\r\n  useRef,\r\n  useState,\r\n  CSSProperties,\r\n  useContext,\r\n  useImperativeHandle,\r\n} from \"react\";\r\nimport {Iconfont} from \"../iconfont\";\r\nimport {CSSTransition} from \"react-transition-group\";\r\nimport {useDialog} from \"../dialog\";\r\nimport {FooterContext} from \"../footer/Footer\";\r\n\r\ninterface CanvasProps {\r\n  width: number;\r\n  height: number;\r\n  onRef: any;\r\n}\r\n\r\ntype Coordinate = {\r\n  x: number;\r\n  y: number;\r\n};\r\n\r\ninterface ClearRectOptions {\r\n  x: number;\r\n  y: number;\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nconst Canvas = ({width, height, onRef}: CanvasProps) => {\r\n  const colorMap = [\"black\", \"red\", \"green\", \"blue\"];\r\n  const optionsMap = [\r\n    \"canvas_save\",\r\n    \"canvas_clear\",\r\n    \"turn_left_flat\",\r\n    \"turn_right_flat\",\r\n  ];\r\n  const toolsMap = [\"canvas_paint\", \"canvas_eraser\"];\r\n\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n  const backRef = useRef<SVGSVGElement>(null);\r\n  const goRef = useRef<SVGSVGElement>(null);\r\n  const [strokeStyle, setStrokeStyle] = useState(\"black\");\r\n  const [lineWidth, setLineWidth] = useState(5);\r\n  const [eraserEnabled, setEraserEnabled] = useState(false);\r\n  const [isPainting, setIsPainting] = useState(false);\r\n  const [mousePosition, setMousePosition] = useState<Coordinate | undefined>(\r\n    undefined\r\n  );\r\n  const [step, setStep] = useState(-1);\r\n  const [canvasHistory, setCanvasHistory] = useState<string[]>([]);\r\n\r\n  const getCoordinates = (event: MouseEvent): Coordinate | undefined => {\r\n    if (!canvasRef.current) {\r\n      return;\r\n    }\r\n    return {\r\n      x: event.offsetX,\r\n      y: event.offsetY,\r\n    };\r\n  };\r\n\r\n  const saveFragment = useCallback(() => {\r\n    setStep(step + 1);\r\n    if (!canvasRef.current) {\r\n      return;\r\n    }\r\n    const canvas: HTMLCanvasElement = canvasRef.current;\r\n    canvasHistory.push(canvas.toDataURL());\r\n    setCanvasHistory(canvasHistory);\r\n\r\n    if (!backRef.current || !goRef.current) {\r\n      return;\r\n    }\r\n    const back: SVGSVGElement = backRef.current;\r\n    const go: SVGSVGElement = goRef.current;\r\n    back.classList.add(\"active\");\r\n    go.classList.remove(\"active\");\r\n  }, [step, canvasHistory]);\r\n\r\n  const startPaint = useCallback((event: MouseEvent) => {\r\n    const coordinates = getCoordinates(event);\r\n    if (coordinates) {\r\n      setMousePosition(coordinates);\r\n      setIsPainting(true);\r\n    }\r\n  }, []);\r\n\r\n  const drawLine = useCallback(\r\n    (originalMousePosition: Coordinate, newMousePosition: Coordinate) => {\r\n      if (!canvasRef.current) {\r\n        return;\r\n      }\r\n      const canvas: HTMLCanvasElement = canvasRef.current;\r\n      const context = canvas.getContext(\"2d\");\r\n      if (context) {\r\n        context.strokeStyle = strokeStyle;\r\n        context.lineJoin = \"round\";\r\n        context.lineWidth = lineWidth;\r\n        context.beginPath();\r\n        context.moveTo(originalMousePosition.x, originalMousePosition.y);\r\n        context.lineTo(newMousePosition.x, newMousePosition.y);\r\n        context.closePath();\r\n        context.stroke();\r\n      }\r\n    },\r\n    [lineWidth, strokeStyle]\r\n  );\r\n\r\n  const clearRect = useCallback(({x, y, width, height}: ClearRectOptions) => {\r\n    if (!canvasRef.current) {\r\n      return;\r\n    }\r\n    const canvas: HTMLCanvasElement = canvasRef.current;\r\n    const context = canvas.getContext(\"2d\");\r\n    if (context) {\r\n      context.clearRect(x, y, width, height);\r\n    }\r\n  }, []);\r\n\r\n  const paint = useCallback(\r\n    (event: MouseEvent) => {\r\n      if (isPainting) {\r\n        const newMousePosition = getCoordinates(event);\r\n        if (mousePosition && newMousePosition) {\r\n          if (eraserEnabled) {\r\n            clearRect({\r\n              x: newMousePosition.x - lineWidth / 2,\r\n              y: newMousePosition.y - lineWidth / 2,\r\n              width: lineWidth,\r\n              height: lineWidth,\r\n            });\r\n          } else {\r\n            drawLine(mousePosition, newMousePosition);\r\n            setMousePosition(newMousePosition);\r\n          }\r\n        }\r\n      }\r\n    },\r\n    [isPainting, eraserEnabled, mousePosition, lineWidth, drawLine, clearRect]\r\n  );\r\n\r\n  const exitPaint = useCallback(() => {\r\n    setIsPainting(false);\r\n    setMousePosition(undefined);\r\n    saveFragment();\r\n  }, [saveFragment]);\r\n\r\n  const leaveCanvas = useCallback(() => {\r\n    setIsPainting(false);\r\n    setMousePosition(undefined);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!canvasRef.current) {\r\n      return;\r\n    }\r\n    const canvas: HTMLCanvasElement = canvasRef.current;\r\n    canvas.addEventListener(\"mousedown\", startPaint);\r\n    canvas.addEventListener(\"mousemove\", paint);\r\n    canvas.addEventListener(\"mouseup\", exitPaint);\r\n    canvas.addEventListener(\"mouseleave\", leaveCanvas);\r\n    return () => {\r\n      canvas.removeEventListener(\"mousedown\", startPaint);\r\n      canvas.removeEventListener(\"mousemove\", paint);\r\n      canvas.removeEventListener(\"mouseup\", exitPaint);\r\n      canvas.removeEventListener(\"mouseleave\", leaveCanvas);\r\n    };\r\n  }, [startPaint, paint, exitPaint, leaveCanvas]);\r\n\r\n  const [isToolboxOpen, setToolboxOpen] = useState(true);\r\n  const toolboxOpenClick = useCallback(() => {\r\n    setToolboxOpen(!isToolboxOpen);\r\n  }, [isToolboxOpen]);\r\n\r\n  const onToolsClick = useCallback(([e, toolName]) => {\r\n    const el = e.currentTarget;\r\n    if (el.classList[1]) return;\r\n    toolName === \"canvas_eraser\"\r\n      ? setEraserEnabled(true)\r\n      : setEraserEnabled(false);\r\n    el.classList.add(\"active\");\r\n    el.parentNode.childNodes.forEach((item: HTMLLIElement) => {\r\n      if (!item.matches(\"svg\") || item === el) return;\r\n      item.classList.remove(\"active\");\r\n    });\r\n  }, []);\r\n\r\n  const onSizesChange = useCallback((e) => {\r\n    setLineWidth(e.target.value);\r\n  }, []);\r\n\r\n  const onColorsClick = useCallback(([e, selector, color]) => {\r\n    const el = e.target;\r\n    if (el.className.includes(\"active\")) return;\r\n    setStrokeStyle(color);\r\n    el.classList.add(\"active\");\r\n    el.parentNode.childNodes.forEach((item: HTMLLIElement) => {\r\n      if (!item.matches(selector) || item === el) return;\r\n      item.classList.remove(\"active\");\r\n    });\r\n  }, []);\r\n\r\n  const onColorsChange = useCallback((e) => {\r\n    setStrokeStyle(e.target.value);\r\n  }, []);\r\n\r\n  const {openDialog, closeDialog, RenderDialog} = useDialog();\r\n  const [isClearDialogOpen, setClearDialogOpen] = useState(false);\r\n  const [closeCanvas, setCloseCanvas] = useState(false);\r\n\r\n  useImperativeHandle(onRef, () => ({\r\n    drawingCloseClick: () => {\r\n      if (step === -1) {\r\n        setDrawingOpen({...isDrawingOpen, type: false});\r\n      } else if (isClearDialogOpen) return;\r\n      setCloseCanvas(true);\r\n    },\r\n  }));\r\n\r\n  useEffect(() => {\r\n    if (closeCanvas) {\r\n      if (!isClearDialogOpen) {\r\n        setClearDialogText({\r\n          title: \"退出将丢失该画布！\",\r\n          message: \"确认退出画板？\",\r\n        });\r\n        setClearDialogOpen(true);\r\n      }\r\n    } else {\r\n      setClearDialogText({\r\n        title: \"您确定要清空该画布吗？\",\r\n        message: \"一旦清空将无法撤回。\",\r\n      });\r\n    }\r\n  }, [closeCanvas, isClearDialogOpen]);\r\n\r\n  const [isDrawingOpen, setDrawingOpen] = useContext(FooterContext);\r\n\r\n  useEffect(isClearDialogOpen ? openDialog : closeDialog, [isClearDialogOpen]);\r\n\r\n  const saveCanvas = useCallback(() => {\r\n    if (!canvasRef.current) {\r\n      return;\r\n    }\r\n    const canvas: HTMLCanvasElement = canvasRef.current;\r\n    const context = canvas.getContext(\"2d\");\r\n    if (context) {\r\n      const compositeOperation = context.globalCompositeOperation;\r\n      context.globalCompositeOperation = \"destination-over\";\r\n      context.fillStyle = \"#fff\";\r\n      context.fillRect(0, 0, width, height);\r\n      const imageData = canvas.toDataURL(\"image/png\");\r\n      context.putImageData(context.getImageData(0, 0, width, height), 0, 0);\r\n      context.globalCompositeOperation = compositeOperation;\r\n      const a = document.createElement(\"a\");\r\n      document.body.appendChild(a);\r\n      a.href = imageData;\r\n      a.download = \"myPaint\";\r\n      a.target = \"_blank\";\r\n      a.click();\r\n    }\r\n  }, [width, height]);\r\n\r\n  const changeCanvas = useCallback(\r\n    (type) => {\r\n      if (!canvasRef.current || !backRef.current || !goRef.current) {\r\n        return;\r\n      }\r\n      const canvas: HTMLCanvasElement = canvasRef.current;\r\n      const context = canvas.getContext(\"2d\");\r\n      const back: SVGSVGElement = backRef.current;\r\n      const go: SVGSVGElement = goRef.current;\r\n      if (context) {\r\n        let currentStep = -1;\r\n        if (type === \"back\" && step >= 0) {\r\n          currentStep = step - 1;\r\n          go.classList.add(\"active\");\r\n          if (currentStep < 0) {\r\n            back.classList.remove(\"active\");\r\n          }\r\n        } else if (type === \"go\" && step < canvasHistory.length - 1) {\r\n          currentStep = step + 1;\r\n          back.classList.add(\"active\");\r\n          if (currentStep === canvasHistory.length - 1) {\r\n            go.classList.remove(\"active\");\r\n          }\r\n        } else {\r\n          return;\r\n        }\r\n        context.clearRect(0, 0, width, height);\r\n        const canvasPic = new Image();\r\n        canvasPic.src = canvasHistory[currentStep];\r\n        canvasPic.addEventListener(\"load\", () => {\r\n          context.drawImage(canvasPic, 0, 0);\r\n        });\r\n        setStep(currentStep);\r\n      }\r\n    },\r\n    [canvasHistory, step, width, height]\r\n  );\r\n\r\n  const onOptionsClick = useCallback(\r\n    ([e, toolName]) => {\r\n      switch (toolName) {\r\n        case \"canvas_clear\":\r\n          if (step === -1) return;\r\n          setClearDialogOpen(true);\r\n          break;\r\n        case \"canvas_save\":\r\n          saveCanvas();\r\n          break;\r\n        case \"turn_left_flat\":\r\n          changeCanvas(\"back\");\r\n          break;\r\n        case \"turn_right_flat\":\r\n          changeCanvas(\"go\");\r\n          break;\r\n      }\r\n    },\r\n    [saveCanvas, changeCanvas, step]\r\n  );\r\n\r\n  const [clearDialogText, setClearDialogText] = useState({\r\n    title: \"您确定要清空该画布吗？\",\r\n    message: \"一旦清空将无法撤回。\",\r\n  });\r\n\r\n  const closeClearDialog = useCallback(() => {\r\n    setClearDialogOpen(false);\r\n    if (closeCanvas) {\r\n      setCloseCanvas(false);\r\n    }\r\n  }, [setClearDialogOpen, closeCanvas, setCloseCanvas]);\r\n\r\n  const checkClearDialog = useCallback(\r\n    (e) => {\r\n      clearRect({\r\n        x: 0,\r\n        y: 0,\r\n        width,\r\n        height,\r\n      });\r\n      setCanvasHistory([]);\r\n      setStep(-1);\r\n      closeClearDialog();\r\n      if (!backRef.current || !goRef.current) {\r\n        return;\r\n      }\r\n      const back: SVGSVGElement = backRef.current;\r\n      const go: SVGSVGElement = goRef.current;\r\n      back.classList.remove(\"active\");\r\n      go.classList.remove(\"active\");\r\n      if (closeCanvas) {\r\n        setDrawingOpen({...isDrawingOpen, type: false});\r\n        setCloseCanvas(false);\r\n      }\r\n    },\r\n    [\r\n      closeClearDialog,\r\n      clearRect,\r\n      width,\r\n      height,\r\n      closeCanvas,\r\n      setCloseCanvas,\r\n      isDrawingOpen,\r\n      setDrawingOpen,\r\n    ]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <canvas id=\"canvas\" ref={canvasRef} height={height} width={width}/>\r\n      <div\r\n        id=\"toolbox-open\"\r\n        style={\r\n          {\r\n            borderRadius: isToolboxOpen ? null : 5,\r\n          } as CSSProperties\r\n        }\r\n      >\r\n        <Iconfont\r\n          type={isToolboxOpen ? \"icon-upward_flat\" : \"icon-downward_flat\"}\r\n          style={{\r\n            width: \"100%\",\r\n            fontSize: 32,\r\n          }}\r\n          clickEvent={toolboxOpenClick}\r\n        />\r\n      </div>\r\n      <CSSTransition\r\n        in={isToolboxOpen} //用于判断是否出现的状态\r\n        timeout={300} //动画持续时间\r\n        classNames=\"toolbox\" //className值，防止重复\r\n        unmountOnExit\r\n      >\r\n        <div id=\"toolbox\">\r\n          <span>Options</span>\r\n          <div className=\"options\">\r\n            {optionsMap.map((option, index) => {\r\n              return (\r\n                <Iconfont\r\n                  svgRef={\r\n                    option === \"turn_right_flat\"\r\n                      ? goRef\r\n                      : option === \"turn_left_flat\"\r\n                      ? backRef\r\n                      : undefined\r\n                  }\r\n                  key={index + option}\r\n                  className={option}\r\n                  type={\"icon-\" + option}\r\n                  style={{fontSize: 50}}\r\n                  clickEvent={(e) => onOptionsClick([e, option])}\r\n                />\r\n              );\r\n            })}\r\n          </div>\r\n          <span>Toolbox</span>\r\n          <div className=\"tools\">\r\n            {toolsMap.map((tool, index) => {\r\n              return (\r\n                <Iconfont\r\n                  key={index + tool}\r\n                  className={\r\n                    tool === \"canvas_eraser\"\r\n                      ? eraserEnabled\r\n                      ? \"active\"\r\n                      : \"\"\r\n                      : !eraserEnabled\r\n                      ? \"active\"\r\n                      : \"\"\r\n                  }\r\n                  type={\"icon-\" + tool}\r\n                  style={{fontSize: 50}}\r\n                  clickEvent={(e) => onToolsClick([e, tool])}\r\n                />\r\n              );\r\n            })}\r\n          </div>\r\n          <div className=\"sizes\">\r\n            <input\r\n              style={\r\n                {\r\n                  backgroundColor: eraserEnabled ? \"#ebeff4\" : strokeStyle,\r\n                } as CSSProperties\r\n              }\r\n              type=\"range\"\r\n              id=\"range\"\r\n              name=\"range\"\r\n              min=\"1\"\r\n              max=\"20\"\r\n              value={lineWidth}\r\n              onChange={onSizesChange}\r\n            />\r\n          </div>\r\n          <ol className=\"colors\">\r\n            {colorMap.map((color, index) => {\r\n              return (\r\n                <li\r\n                  className={color === strokeStyle ? color + \" active\" : color}\r\n                  key={index + color}\r\n                  onClick={(e) => onColorsClick([e, \"li\", color])}\r\n                />\r\n              );\r\n            })}\r\n            <input\r\n              type=\"color\"\r\n              value={strokeStyle}\r\n              onChange={onColorsChange}\r\n              id=\"currentColor\"\r\n            />\r\n          </ol>\r\n        </div>\r\n      </CSSTransition>\r\n      <RenderDialog\r\n        width={300}\r\n        height={120}\r\n        id=\"clear-dialog\"\r\n        title={clearDialogText.title}\r\n        message={clearDialogText.message}\r\n        imgSrc={\"Drawing.png\"}\r\n        onCheck={checkClearDialog}\r\n        onClose={closeClearDialog}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nCanvas.defaultProps = {\r\n  width: window.innerWidth,\r\n  height: window.innerHeight,\r\n};\r\n\r\nexport default Canvas;\r\n","D:\\ada\\code\\my-desktop\\src\\components\\draggable\\index.tsx",[],"D:\\ada\\code\\my-desktop\\src\\components\\modal\\Modal.tsx",[],"D:\\ada\\code\\my-desktop\\src\\components\\modal\\draggable\\index.tsx",[],"D:\\ada\\code\\my-desktop\\src\\components\\dialog\\index.tsx",[],{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","severity":1,"message":"98","line":72,"column":3,"nodeType":"99","endLine":72,"endColumn":12},{"ruleId":"97","severity":1,"message":"98","line":18,"column":3,"nodeType":"99","endLine":18,"endColumn":12},{"ruleId":"97","severity":1,"message":"98","line":23,"column":3,"nodeType":"99","endLine":23,"endColumn":12},{"ruleId":"97","severity":1,"message":"98","line":243,"column":3,"nodeType":"99","endLine":243,"endColumn":12},"no-native-reassign",["100"],"no-negated-in-lhs",["101"],"react-hooks/exhaustive-deps","React Hook useEffect received a function whose dependencies are unknown. Pass an inline function instead.","Identifier","no-global-assign","no-unsafe-negation"]